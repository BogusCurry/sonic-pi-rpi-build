Description: Revert removal of fhs support.
 Upstream removed support for fhs compliant installs in
 83b61f35e36ea2f5968819fee5e7b6a69770fb3f, and 
 180979a9315bbc4edf0a204ab0c9344fc2dac14b this patch restores
 that support (it is essentially a revert of the above commit,
 but edited to match the current source)
Author: Peter Michael Green <plugwash@debian.org>

Index: sonic-pi-3.1.0~repack~test-1/app/gui/qt/mainwindow.cpp
===================================================================
--- sonic-pi-3.1.0~repack~test-1.orig/app/gui/qt/mainwindow.cpp
+++ sonic-pi-3.1.0~repack~test-1/app/gui/qt/mainwindow.cpp
@@ -117,10 +117,35 @@ MainWindow::MainWindow(QApplication &app
 MainWindow::MainWindow(QApplication &app, bool i18n, QSplashScreen* splash)
 #endif
 {
+QString root_path;
+#if defined(Q_OS_LINUX)
+  if (QCoreApplication::applicationDirPath().startsWith("/usr/bin")) {
+
+    // use FHS directory scheme:
+    // Sonic Pi is installed in /usr/bin from a Linux distribution's package
+
+    root_path = "/usr/lib/sonic-pi";
+    ruby_path = "/usr/bin/ruby";
+    ruby_server_path = "/usr/lib/sonic-pi/server/bin/sonic-pi-server.rb";
+    port_discovery_path = "/usr/lib/sonic-pi/server/bin/port-discovery.rb";
+    sample_path = "/usr/share/sonic-pi/samples";
+
+  } else if (QCoreApplication::applicationDirPath().startsWith("/opt")) {
+
+    // use /opt directory scheme:
+    // Sonic Pi is installed in /opt from the Raspbian .deb package
+
+    ruby_path = "/usr/bin/ruby";
+    ruby_server_path = "/opt/sonic-pi/server/bin/sonic-pi-server.rb";
+    port_discovery_path = "/opt/sonic-pi/server/bin//port-discovery.rb";
+    sample_path = "/opt/sonic-pi/etc/samples";
 
+  } else {
+#endif
+    // Sonic Pi is installed in the user's home directory
+    // or has been installed on Windows / OSX
 
-
-  QString root_path = rootPath();
+    root_path = rootPath();
 
 #if defined(Q_OS_WIN)
   ruby_path = QDir::toNativeSeparators(root_path + "/app/server/native/ruby/bin/ruby.exe");
@@ -130,15 +155,19 @@ MainWindow::MainWindow(QApplication &app
   ruby_path = root_path + "/app/server/native/ruby/bin/ruby";
 #endif
 
-  QFile file(ruby_path);
-  if(!file.exists()) {
-    // fallback to user's locally installed ruby
-    ruby_path = "ruby";
-  }
+    QFile file(ruby_path);
+    if(!file.exists()) {
+      // fallback to user's locally installed ruby
+      ruby_path = "ruby";
+    }
+
+    ruby_server_path = QDir::toNativeSeparators(root_path + "/app/server/ruby/bin/sonic-pi-server.rb");
+    port_discovery_path = QDir::toNativeSeparators(root_path + "/app/server/ruby/bin/port-discovery.rb");
+    sample_path = QDir::toNativeSeparators(root_path + "/etc/samples");
 
-  ruby_server_path = QDir::toNativeSeparators(root_path + "/app/server/ruby/bin/sonic-pi-server.rb");
-  port_discovery_path = QDir::toNativeSeparators(root_path + "/app/server/ruby/bin/port-discovery.rb");
-  sample_path = QDir::toNativeSeparators(root_path + "/etc/samples");
+#if defined(Q_OS_LINUX)
+  }
+#endif
 
   sp_user_path           = QDir::toNativeSeparators(sonicPiHomePath() + "/.sonic-pi");
   sp_user_tmp_path       = QDir::toNativeSeparators(sp_user_path + "/.writableTesterPath");
@@ -1059,7 +1088,13 @@ void MainWindow::startRubyServer(){
   // Register server pid for potential zombie clearing
   QStringList regServerArgs;
 #if QT_VERSION >= QT_VERSION_CHECK(5, 3, 0)
-  regServerArgs << QDir::toNativeSeparators(rootPath() + "/app/server/ruby/bin/task-register.rb")<< QString::number(serverProcess->processId());
+  QString taskregpath;
+  if (QCoreApplication::applicationDirPath().startsWith("/usr/bin")) {
+     taskregpath = "usr/lib/sonic-pi/server/bin/task-register.rb";
+  } else {
+     taskregpath = rootPath() + "/app/server/ruby/bin/task-register.rb";
+  }
+  regServerArgs << QDir::toNativeSeparators(taskregpath)<< QString::number(serverProcess->processId());
 #endif
   QProcess *regServerProcess = new QProcess();
   regServerProcess->start(ruby_path, regServerArgs);
Index: sonic-pi-3.1.0~repack~test-1/app/server/ruby/core.rb
===================================================================
--- sonic-pi-3.1.0~repack~test-1.orig/app/server/ruby/core.rb
+++ sonic-pi-3.1.0~repack~test-1/app/server/ruby/core.rb
@@ -140,8 +140,13 @@ end
 module SonicPi
   module Core
     module SPRand
+      # use FHS directory scheme:
+      # check if Sonic Pi's ruby server is not running inside the
+      # user's home directory, but is installed in /usr/lib/sonic-pi
+      # on Linux from a distribution's package
+      random_numbers_path = File.dirname(__FILE__).start_with?("/usr/lib/sonic-pi") ? "/usr/share/sonic-pi" : "../../../../etc"
       # Read in same random numbers as server for random stream sync
-      @@random_numbers = ::WaveFile::Reader.new(File.expand_path("../../../../etc/buffers/rand-stream.wav", __FILE__), ::WaveFile::Format.new(:mono, :float, 44100)).read(441000).samples.freeze
+      @@random_numbers = ::WaveFile::Reader.new(File.expand_path("#{random_numbers_path}/buffers/rand-stream.wav", __FILE__), ::WaveFile::Format.new(:mono, :float, 44100)).read(441000).samples.freeze
 
       def self.tl_seed_map(seed, idx=0)
         {:sonic_pi_spider_random_gen_seed => seed,
Index: sonic-pi-3.1.0~repack~test-1/app/server/ruby/lib/sonicpi/util.rb
===================================================================
--- sonic-pi-3.1.0~repack~test-1.orig/app/server/ruby/lib/sonicpi/util.rb
+++ sonic-pi-3.1.0~repack~test-1/app/server/ruby/lib/sonicpi/util.rb
@@ -215,6 +215,14 @@ module SonicPi
       end
     end
 
+    def linux_fhs?
+      # use FHS directory scheme:
+      # check if Sonic Pi's ruby server is not running inside the
+      # user's home directory, but is installed in /usr/lib/sonic-pi
+      # on Linux from a distribution's package
+      File.dirname(__FILE__).start_with?("/usr/lib/sonic-pi")
+    end
+
     def root_path
       File.absolute_path("#{File.dirname(__FILE__)}/../../../../../")
     end
@@ -224,11 +232,15 @@ module SonicPi
     end
 
     def snippets_path
-      File.absolute_path("#{etc_path}/snippets")
+      linux_fhs? ?
+        File.absolute_path("/usr/share/sonic-pi/snippets") :
+        File.absolute_path("#{etc_path}/snippets")
     end
 
     def doc_path
-      File.absolute_path("#{etc_path}/doc")
+      linux_fhs? ?
+        File.absolute_path("/usr/share/doc/sonic-pi") :
+        File.absolute_path("#{etc_path}/doc")
     end
 
     def cheatsheets_path
@@ -240,19 +252,27 @@ module SonicPi
     end
 
     def tmp_path
-      File.absolute_path("#{root_path}/tmp")
+      linux_fhs? ?
+        File.absolute_path("/tmp") :
+        File.absolute_path("#{root_path}/tmp")
     end
 
     def synthdef_path
-      File.absolute_path("#{etc_path}/synthdefs/compiled")
+      linux_fhs? ?
+        File.absolute_path("/usr/share/sonic-pi/synthdefs/compiled") :
+        File.absolute_path("#{etc_path}/synthdefs/compiled")
     end
 
     def samples_path
-      File.absolute_path("#{etc_path}/samples")
+      linux_fhs? ?
+        File.absolute_path("/usr/share/sonic-pi/samples") :
+        File.absolute_path("#{etc_path}/samples")
     end
 
     def buffers_path
-      File.absolute_path("#{etc_path}/buffers")
+      linux_fhs? ?
+        File.absolute_path("/usr/share/sonic-pi/buffers") :
+        File.absolute_path("#{etc_path}/buffers")
     end
 
     def app_path
